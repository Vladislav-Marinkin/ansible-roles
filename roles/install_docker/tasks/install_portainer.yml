---
# ======================================
# üîó 1Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
# ======================================

- name: Include variables
  include_vars: vars/portainer.yml

# ========================================
# üìÇ 2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
# ========================================

- name: Create directory for cert
  file:
    path: /etc/ssl/{{ portainer_domine }}
    state: directory
    owner: root
    group: root
    mode: "0644"

# ========================================
# üîê 3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
# ========================================

- name: Generate an OpenSSL private key
  openssl_privatekey:
    path: "/etc/ssl/{{ portainer_domine }}/privkey.pem"
    size: 4096
    type: RSA
    backup: yes

- name: Generate an OpenSSL Certificate Signing Request with Subject information
  openssl_csr:
    path: "/etc/ssl/{{ portainer_domine }}/server.csr"
    privatekey_path: "/etc/ssl/{{ portainer_domine }}/privkey.pem"
    country_name: "RU"
    organization_name: "None"
    email_address: "admin@mail.local"
    common_name: "portainer.local"

- name: Generate a Self Signed OpenSSL certificate
  openssl_certificate:
    path: "/etc/ssl/{{ portainer_domine }}/cert.pem"
    privatekey_path: "/etc/ssl/{{ portainer_domine }}/privkey.pem"
    csr_path: "/etc/ssl/{{ portainer_domine }}/server.csr"
    provider: selfsigned

# ========================================
# üñß 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
# ========================================

- name: Check for available ports
  shell: |
    free_ports_count=0
    for port in $(seq 40000 50000); do
      if ! ss -tuln | grep -q ":$port "; then
        free_ports_count=$((free_ports_count + 1))
        echo "$port"
      fi
      # Break once 2 free ports are found
      if [ $free_ports_count -ge 2 ]; then
        break
      fi
    done
  register: result
  changed_when: false

- name: Split free ports into separate variables
  set_fact:
    free_ports: "{{ result.stdout.split('\n') }}"

- name: Set variables for each free port
  set_fact:
    free_port_1: "{{ free_ports[0] }}"
    free_port_2: "{{ free_ports[1] }}"

# ====================================================
# üìù 5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è nginx
# ====================================================
- name: Create config for nginx
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/conf.d/portainer.conf
    mode: '0644'
  notify: Reload nginx

# ========================================
# üê≥ 6Ô∏è‚É£ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Portainer
# ========================================

- name: Deploy Portainer container
  docker_container:
    name: portainer
    image: portainer/portainer-ce:latest
    state: started
    restart_policy: unless-stopped
    published_ports:
      - "{{ free_port_1 }}:9000"
      - "{{ free_port_2 }}:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
  register: portainer_container

- name: Generate a random password
  set_fact:
    random_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters+digits') }}"

- name: Wait for Portainer API to be available
  wait_for:
    host: "{{ inventory_hostname }}"
    port: "{{ free_port_1 }}"
    state: started
    delay: 10
    timeout: 60

- name: Create user in Portainer via API with random password
  uri:
    url: "http://{{ inventory_hostname }}:{{ free_port_1 }}/api/users/admin/init"
    method: POST
    headers:
      Content-Type: "application/json"
    body: |
      {
        "username": "admin",
        "password": "{{ random_password }}",
        "role": 1
      }
    body_format: json
    status_code: 200
    return_content: yes
  register: create_user_response

- name: Show user creation result
  debug:
    var: create_user_response

- name: Show the random password
  debug:
    msg: "The generated password is: {{ random_password }}"